[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "agentic-ai-microservice"
version = "0.1.0"
description = "Revolutionary agentic AI microservice with LangChain/LangGraph integration and OpenWebUI compatibility"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "Agentic AI Team", email = "team@agentic-ai.com" },
]
keywords = [
    "ai",
    "agents",
    "microservice",
    "langchain",
    "langgraph",
    "fastapi",
    "openwebui",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core FastAPI and ASGI
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # LangChain and LangGraph
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.0.10",
    "langgraph>=0.0.20",
    "langchain-openai>=0.0.5",
    "langchain-ollama>=0.0.1",
    
    # Database and ORM
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    "psycopg2-binary>=2.9.9",  # PostgreSQL sync driver
    
    # Redis for caching and state management
    "redis>=5.0.1",
    "aioredis>=2.0.1",
    
    # HTTP clients and networking
    "httpx>=0.25.2",
    "aiohttp>=3.9.1",
    "websockets>=12.0",
    
    # Utilities and helpers
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    
    # Monitoring and observability
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    
    # Data processing
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "tiktoken>=0.5.2",
    

]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",  # For testing FastAPI
    "factory-boy>=3.3.0",
    
    # Code quality
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    
    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
    
    # Development utilities
    "ipython>=8.17.2",
    "jupyter>=1.0.0",
    "watchdog>=3.0.0",
]

production = [
    # Production ASGI server
    "gunicorn>=21.2.0",

    # Enhanced monitoring
    "sentry-sdk[fastapi]>=1.38.0",

    # Performance
    "orjson>=3.9.10",
]

gpu = [
    # GPU acceleration
    "torch>=2.1.0",
    "transformers>=4.35.0",
    "sentence-transformers>=2.2.2",
    "accelerate>=0.24.1",
]

[project.urls]
Homepage = "https://github.com/agentic-ai/microservice"
Documentation = "https://docs.agentic-ai.com"
Repository = "https://github.com/agentic-ai/microservice.git"
"Bug Tracker" = "https://github.com/agentic-ai/microservice/issues"

[project.scripts]
agentic-server = "app.main:main"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langgraph.*",
    "redis.*",
    "celery.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
