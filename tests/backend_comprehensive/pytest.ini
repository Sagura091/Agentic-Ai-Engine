[tool:pytest]
# Pytest configuration for comprehensive backend testing

# Test discovery
testpaths = tests/backend_comprehensive
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Async support
asyncio_mode = auto

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests between components
    e2e: End-to-end workflow tests
    behavior: Agent behavior validation tests
    performance: Performance and scalability tests
    stress: Stress testing under load
    rag: RAG system and knowledge base tests
    autonomous: Autonomous agent functionality tests
    slow: Tests that take longer to run
    critical: Critical functionality tests

# Test output configuration
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --durations=10
    --color=yes
    --disable-warnings

# Minimum version requirements
minversion = 6.0

# Test timeout (in seconds)
timeout = 300

# Coverage configuration
[coverage:run]
source = app/
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(Protocol\):
    @(abc\.)?abstractmethod

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filterwarnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:asyncio
