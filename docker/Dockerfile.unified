# Unified Dockerfile for Agentic AI System
# Combines Python backend and Node.js frontend in a single image

# Stage 1: Build React Frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy frontend package files
COPY frontend/package*.json ./

# Install dependencies (including dev dependencies for build)
RUN npm install

# Copy frontend source code
COPY frontend/ ./

# Build the React app
RUN npm run build

# Stage 3: Python Backend Base
FROM python:3.11-slim AS backend-base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libpq-dev \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy Python application code
COPY app/ ./app/
COPY pyproject.toml .

# Create necessary directories
RUN mkdir -p /app/data/agents /app/data/workflows /app/data/checkpoints /app/data/logs

# Stage 4: Final Unified Image
FROM backend-base AS unified

# Create frontend directory
RUN mkdir -p /app/frontend

# Copy built React app from frontend-builder
COPY --from=frontend-builder /app/frontend/dist /app/frontend/dist

# Copy supervisor configuration
COPY <<EOF /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:backend]
command=uvicorn app.main:socketio_app --host 0.0.0.0 --port 8001
directory=/app
user=appuser
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/backend.err.log
stdout_logfile=/var/log/supervisor/backend.out.log
environment=PYTHONPATH="/app"

[program:frontend]
command=python -m http.server 3001 --directory /app/frontend/dist
user=appuser
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/frontend.err.log
stdout_logfile=/var/log/supervisor/frontend.out.log

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
EOF

# Create log directories
RUN mkdir -p /var/log/supervisor

# Change ownership to appuser
RUN chown -R appuser:appuser /app /var/log/supervisor

# Create startup script
COPY <<EOF /app/start.sh
#!/bin/bash
set -e

echo "🚀 Starting Agentic AI System..."
echo "Backend will be available at: http://localhost:8001"
echo "Frontend will be available at: http://localhost:3001"

# Start supervisor
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

RUN chmod +x /app/start.sh

# Health check script
COPY <<EOF /app/healthcheck.sh
#!/bin/bash
# Check if both services are running
backend_health=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/health || echo "000")
frontend_health=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/ || echo "000")

if [ "$backend_health" = "200" ] && [ "$frontend_health" = "200" ]; then
    echo "✅ Both services are healthy"
    exit 0
else
    echo "❌ Service health check failed - Backend: $backend_health, Frontend: $frontend_health"
    exit 1
fi
EOF

RUN chmod +x /app/healthcheck.sh

# Expose ports
EXPOSE 8001 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/healthcheck.sh

# Set environment variables
ENV NODE_ENV=production \
    AGENTIC_API_URL=http://localhost:8001 \
    REACT_APP_API_URL=http://localhost:3001 \
    REACT_APP_WS_URL=ws://localhost:3001

# Start the application
CMD ["/app/start.sh"]
